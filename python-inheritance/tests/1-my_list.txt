[1, 4, 2, 3, 5]
[1, 2, 3, 4, 5]
[1, 4, 2, 3, 5] 


# Test instantiation
>>> my_list = MyList()
>>> isinstance(my_list, MyList)
True

# Test inherits from list
>>> isinstance(my_list, list)
True

# Test __str__
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.__str__()
'[1, 2]'

# Test append()
>>> my_list.append(3)
>>> my_list
[1, 2, 3]

# Test print_sorted() with sorted append
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.print_sorted()
[1, 2, 3]

# Test print_sorted() with not sorted append
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.print_sorted()
[1, 2, 3]

# Test print_sorted() with no sorted append with negative number
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(-1)
>>> my_list.append(2)
>>> my_list.print_sorted()
[-1, 2, 3]

# Test print_sorted() with empty list
>>> my_list = MyList()
>>> my_list.print_sorted()
[]

# Test print_sorted() returns a new sorted list, without modifying the original list
>>> my_list = MyList([3, 1, 2])
>>> my_list.print_sorted()
[1, 2, 3]
>>> my_list  # Ensure original list is unchanged
[3, 1, 2]

